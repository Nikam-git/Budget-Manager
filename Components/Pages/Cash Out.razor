<h1>Cash_Out</h1>
@page "/cashout"

@using System
@using BudgetManager.Components.Model
@using BudgetManager.Components.Services
@inject DealService DealService

<div class="expense-container">
    <div class="expense-header">
        <div class="filter-group">
            <input @bind="SearchText" placeholder="Search expense source......" />
        </div>
        <div class="filter-group">
            <input type="text" @bind="FilterTag" placeholder="Enter Expense Tags" />
        </div>
        <div class="filter-group">
            <label for="Date">Date:</label>
            <input type="date" id="date" @bind="FilterDate" />
        </div>
        <div class="filter-actions">
            <button @onclick="ApplyFilter">Filter Expenses</button>
            <button @onclick="ResetFilter">Reset Filter</button>
        </div>
    </div>

    <div class="expense-actions">
        <button @onclick="ToggleDateSorting">Sort by Date</button>
    </div>

    <div class="expense-content">
        <h2>@TotalSpent</h2>
        <div class="expense-details">
            <h3>Expense Records</h3>
            @if (FilteredExpenses.Count > 0)
            {
                <table>
                    <thead>
                        <tr>
                            <th>Expense Title</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Tags</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expense in FilteredExpenses)
                        {
                            <tr>
                                <td>@expense.Description</td>
                                <td>@expense.Amount</td>
                                <td>@expense.Date.ToString("yyyy-MM-dd")</td>
                                <td>@(string.IsNullOrEmpty(expense.Tags) ? "No Tags" : expense.Tags)</td>
                                <td>@(string.IsNullOrEmpty(expense.Note) ? "No Notes" : expense.Note)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            <h3>Add New Expense</h3>
            <input @bind="NewExpenseTitle" placeholder="Source" />
            <input tabindex="NewExpenseAmount" type="number" @bind="NewExpenseAmount" placeholder="Amount" />
            <textarea @bind="NewExpenseNote" placeholder="Add a note (optional)"></textarea>
            <input @bind="NewExpenseTag" placeholder="Tag" />
            <button @onclick="CreateExpense">Add Expense</button>
        </div>
    </div>
</div>

@code {
    private string NewExpenseTitle = string.Empty;
    private string NewExpenseTag = string.Empty;
    private string NotificationMessage = string.Empty;
    private string NewExpenseNote = string.Empty;
    private decimal NewExpenseAmount;
    private decimal TotalIncomeAvailable;
    private decimal TotalSpent;
    private decimal RemainingIncome;
    private List<Deal> ExpenseRecords = new();
    private string SearchText = string.Empty;
    private string FilterTag = string.Empty;
    private DateTime? FilterDate = null;
    private List<Deal> FilteredExpenses = new();
    private bool IsAscendingDate = true;

    protected override void OnInitialized()
    {
        ExpenseRecords = DealService.GetByType(Deal.RecordType.CashOut); // Assuming 'CashOut' is used for expenses
        TotalSpent = DealService.GetTotalAmount(Deal.RecordType.CashOut);
        FilteredExpenses = ExpenseRecords;
        RemainingIncome = DealService.GetLeftCashFlow(); // Adjusted to reflect 'CashOut' related balance
    }

    private void CreateExpense()
    {
        if (NewExpenseAmount <= 0)
        {
            NotificationMessage = "Expense amount cannot be zero";
            return;
        }

        if (NewExpenseAmount > RemainingIncome)
        {
            NotificationMessage = "Expense exceeds available income";
            return;
        }

        var newExpense = new Deal
            {
                Description = NewExpenseTitle, // Use 'Description' for title
                Amount = NewExpenseAmount,
                Type = Deal.RecordType.CashOut, // Using 'CashOut' for expense type
                Tags = NewExpenseTag,
                Note = NewExpenseNote,
                Date = DateTime.Now
            };

        // Call the service to add the new transaction
        DealService.AddDeal(newExpense);

        // Update the remaining income (left cash flow)
        DealService.UpdateLeftCashFlow(DealService.GetLeftCashFlow() - NewExpenseAmount);

        // Reload and reset fields
        OnInitialized();
        ResetFields();
    }

    private void ResetFields()
    {
        NewExpenseTitle = string.Empty;
        NewExpenseAmount = 0;
        NewExpenseNote = string.Empty;
        NewExpenseTag = string.Empty;
    }

    private void ApplyFilter()
    {
        FilteredExpenses = ExpenseRecords.Where(expense =>
            (string.IsNullOrEmpty(SearchText) || expense.Description.Contains(SearchText, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterTag) || expense.Tags.Contains(FilterTag, StringComparison.OrdinalIgnoreCase)) &&
            (!FilterDate.HasValue || expense.Date.Date == FilterDate.Value.Date)
        ).ToList();
    }

    private void ResetFilter()
    {
        SearchText = string.Empty;
        FilterTag = string.Empty;
        FilterDate = null;
        FilteredExpenses = ExpenseRecords;
    }

    private void ToggleDateSorting()
    {
        IsAscendingDate = !IsAscendingDate;
        FilteredExpenses = IsAscendingDate
            ? FilteredExpenses.OrderBy(e => e.Date).ToList()
            : FilteredExpenses.OrderByDescending(e => e.Date).ToList();
    }
}
